page.title=启动活动
parent.title=管理活动的生命周期
parent.link=index.html

trainingnavtop=true
next.title=暂停和恢复活动
next.link=pausing.html

@jd:body


<div id="tb-wrapper">
  <div id="tb">
    
    <h2>该课程教你</h2>
<ol>
  <li><a href="#lifecycle-states">了解生命周期回调方法</a></li>
  <li><a href="#launching-activity">指定您的应用的启动活动</a></li>
  <li><a href="#Create">创建一个新的实例</a></li>
  <li><a href="#Destroy">销毁活动</a></li>
</ol>
    
    <h2>你也应该阅读</h2>
    <ul>
      <li><a href="{@docRoot}guide/components/activities.html">活动</a></li>
    </ul>

<h2>试试吧</h2>

<div class="download-box">
 <a href="http://developer.android.com/shareables/training/ActivityLifecycle.zip"
class="button">下载演示程序</a>
 <p class="filename">ActivityLifecycle.zip</p>
</div>

  </div>
</div>

<p>不像其他的编程语言，由{@code main()}方法启动，Android系统启动{@link android.app.Activity 活动}
  实例是通过调用其生命周期的特定阶段的相应的回调方法实现的。有一个序列的回调方法对应启动活动的过程，
  另一个序列的回调方法对应停止活动的过程。</p>

<p>本课程提供了最重要的生命周期方法的概述，并告诉您如何处理第一个生命周期回调方法来创建一个活动的新实例。</p>



<h2 id="lifecycle-states">了解生命周期回调方法</h2>

<p>在活动的整个生存期间中，系统调用一系列类似金字塔阶梯的核心生命周期方法。
  也就是说，活动生命周期的每个阶段是金字塔阶梯的一层。
  当系统创建了一个新的活动实例，每个回调方法的调用会使活动状态向顶部移动一步。
  金字塔顶端的活动是在前台运行的、用户可以与其进行交互。</p>

<p>当用户开始离开活动时，系统调用其他方法，将活动状态向金字塔下方移动，依次拆除活动。
  在某些情况下，活动只沿着金字塔向下移动一部分，并等待（例如，当用户切换到另一个应用时），
  从这一点可以再回到顶端（如果用户返回该活动）并恢复用户离开时的状态。</p>


<img src="{@docRoot}images/training/basics/basic-lifecycle.png" />
<p class="img-caption"><strong>图 1.</strong> 金字塔阶梯形的活动生命周期简化示意图。
  该图展示了使活动回到顶部 Resumed 状态的每个回调方法，也包含使活动沿阶梯下移的回调方法。
  活动可以从 Paused状态和 Stopped状态返回到 Resumed 状态。</p>


<p>根据您的活动的复杂性，你可能并不需要实现所有的生命周期方法。
  然而，重要的是要你了解它们，确保您实现的应用的行为是用户所期望的。
  正确地实现您的活动的生命周期方法，确保您的应用在如下条件下可以很好的运行：</p>
<ul>
  <li>在用户使用你的应用的过程中，接到一个电话，或切换到另一个应用时，程序不会崩溃。</li>
  <li>当用户不积极地使用时，不占用宝贵的系统资源。</li>
  <li>在用户离开您的应用并在不久不久之后返回时，不丢失用户的数据。</li>
  <li>当屏幕在横向和纵向之间旋转后，不会崩溃或丢失用户数据。</li>
</ul>

<!--
<p class="table-caption"><strong>Table 1.</strong> Activity lifecycle state pairs and callback 
methods.</p>
<table>
  <tr>
    <th scope="col">Lifecycle State</th>
    <th scope="col">Startup Method</th>
    <th scope="col">Teardown Method</th>
  </tr>
  <tr>
    <td>Created / Destroyed</td>
    <td>{@link android.app.Activity#onCreate onCreate()}</td>
    <td>{@link android.app.Activity#onDestroy()}</td>
  </tr>
  <tr>
    <td>Started / Stopped</td>
    <td>{@link android.app.Activity#onStart()}</td>
    <td>{@link android.app.Activity#onStop()}</td>
  </tr>
  <tr>
    <td>Resumed / Resumed</td>
    <td>{@link android.app.Activity#onResume()}</td>
    <td>{@link android.app.Activity#onPause()}</td>
  </tr>
</table>
-->

<p>在接下来的课程中你会学到，如图1所示的，活动在不同状态之间变换的几种情况。
  然而，这些状态中只有三个是静态的。即，活动可以长时间保持的状态只有三种：</p>
<dl>
  <dt>Resumed</dt>
    <dd>在该状态下，活动处于前台，并且用户可以与它进行交互。（有时也简称为“运行”状态。）</dd>
  <dt>Paused</dt>
    <dd>在这种状态下，活动的一部分被另一个活动遮蔽&mdash;另一个活动处于前台，是半透明的或没有覆盖整个屏幕。
      暂停的活动不接受用户输入，也不能执行任何代码。</dd>
  <dt>Stopped</dt>
    <dd>在该状态下，活动是完全隐藏、对用户不可见的，作为后台应用。
      停止时，会保留活动实例和所有的成员变量的状态信息，但它不能执行任何代码。</dd>
</dl>

<p>其它状态（Created和Started）是短暂的，系统通过调用下一个生命周期回调方法，很快会将它们切换到下一个状态。
  也就是说，在系统调用{@link android.app.Activity#onCreate onCreate()}后，很快会调用{@link
  android.app.Activity#onStart()}，紧接着调用{@link android.app.Activity#onResume()}。</p>

<p>这是基本的活动生命周期。现在你可以开始学习一些特定生命周期的行为。</p>



<h2 id="launching-activity">指定您的应用的启动活动</h2> 

<p>当用户从主屏幕中选择您的应用图标时，系统调用你的应用中定义的“launcher”（或“main”）{@link
  android.app.Activity 活动}的{@link android.app.Activity#onCreate onCreate()}方法。
  这是你的应用的用户界面的主入口点。</p>

<p>您可以在项目根目录中的 Android 清单文件（<a href="{@docRoot}guide/topics/manifest/manifest-intro.html">
  {@code AndroidManifest.xml}</a>）中定义那个活动作为主要活动。</p>

<p>用于的主要活动必须在清单文件中声明包括 {@link android.content.Intent#ACTION_MAIN MAIN} 动作和 
  {@link android.content.Intent#CATEGORY_LAUNCHER LAUNCHER} 分类的<a 
  href="{@docRoot}guide/topics/manifest/intent-filter-element.html">{@code &lt;intent-filter>}</a>。
  例如：</p> 

<pre>
&lt;activity android:name=".MainActivity" android:label="&#64;string/app_name">
    &lt;intent-filter>
        &lt;action android:name="android.intent.action.MAIN" />
        &lt;category android:name="android.intent.category.LAUNCHER" />
    &lt;/intent-filter>
&lt;/activity>
</pre>

<p class="note"><strong>注：</strong> 当你使用Android SDK工具创建新的Andr​​oid项目时，
默认的项目文件中包括一个{@link android.app.Activity}类，该类在清单中是用此过滤器声明的。</p>

<p>如果你的活动中没有一个使用 {@link android.content.Intent#ACTION_MAIN MAIN} 动作或 {@link
  android.content.Intent#CATEGORY_LAUNCHER LAUNCHER} 分类来声明，
  那么你的应用图标不会出现在主屏幕的应用程序列表中。</p>



<h2 id="Create">创建一个新的实例</h2>

<p>大多数的应用包含几个不同的活动，允许用户执行不同的操作。
  当活动是用户点击应用图标或是您的应用在响应用户操作时启动的活动是主活动时，系统将为每个{@link
  android.app.Activity 活动}调用{@link android.app.Activity#onCreate onCreate()}方法创建新实例。</p>

<p>您必须实现{@link android.app.Activity#onCreate onCreate()}方法，
  执行在活动的整个生命周期中只执行一次的基本的应用启动逻辑。例如，你实现的{@link
  android.app.Activity#onCreate onCreate()}中应该定义用户界面，并可能实例化一些类范围的变量。</p>

<p>例如，下面的{@link android.app.Activity#onCreate onCreate()}方法的示例，展示了一些代码，
  进行一些基本的设置的活动，如声明在XML布局文件中定义的用户界面，定义成员变量，并配置一些界面元素。</p>

<pre>
TextView mTextView; // Member variable for text view in the layout

&#64;Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // Set the user interface layout for this Activity
    // The layout file is defined in the project res/layout/main_activity.xml file
    setContentView(R.layout.main_activity);
    
    // Initialize member TextView so we can manipulate it later
    mTextView = (TextView) findViewById(R.id.text_message);
    
    // Make sure we're running on Honeycomb or higher to use ActionBar APIs
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        // For the main activity, make sure the app icon in the action bar
        // does not behave as a button
        ActionBar actionBar = getActionBar();
        actionBar.setHomeButtonEnabled(false);
    }
}
</pre>

<p class="caution"><strong>注意：</strong> 使用 {@link android.os.Build.VERSION#SDK_INT} 
  来防止旧版系统执行只有在Android 2.0（API级别5）和更高版本才能工作的新 API。较旧的版本会遇到运行时异常。</p>

<p>一旦{@link android.app.Activity#onCreate onCreate()}执行结束，系统会快速连续的调用{@link
  android.app.Activity#onStart()}和{@link android.app.Activity#onResume()}方法。
  你的活动永远不会停留在Created或Started状态。从技术上讲，活动在{@link android.app.Activity#onStart()}
  执行之后，即可为用户所见。但因为紧接着调用了{@link android.app.Activity#onResume()}，活动就处于 Resumed
  状态了。直到发生类似，用户接到电话、用户切换到另一个活动、或者设备屏幕关闭等事情时才会改变其状态。</p>

<p>在后续的课程中，你会看到在活动的生命周期中用于从 Paused 和 Stopped 状态恢复活动的方法，{@link
  android.app.Activity#onStart()} 和 {@link android.app.Activity#onResume()} 是如何动作的。</p>

<p class="note"><strong>注：</strong> {@link android.app.Activity#onCreate onCreate()}方法有一个名为
  <code>savedInstanceState</code> 的参数，我们在之后的<a href="recreating.html">重新创建活动</a>中讨论。</p>


<img src="{@docRoot}images/training/basics/basic-lifecycle-create.png" />
<p class="img-caption"><strong>图 2.</strong> 包含构成活动生命周期的三个主要回调方法的另一个示例。
  创建活动的新实例时，系统的调用序列为：{@link android.app.Activity#onCreate onCreate()}、{@link
  android.app.Activity#onStart()}和{@link android.app.Activity#onResume()}。一旦这个回调方法序列执行完毕，
  活动就进入 Resumed 状态，用户可以与活动进行交互，直到他们切换到不同的活动。</p>



<h2 id="Destroy">销毁活动</h2>

<p>活动的第一个生命周期回调方法是{@link android.app.Activity#onCreate onCreate()}，最后一个回调方法是
  {@link android.app.Activity#onDestroy}。系统调用该方法作为活动实例已经完全从系统内存中移除的最终信号。</p>

<p>大多数应用程序并不需要实现这个方法，因为对局部类的引用将与活动一起销毁，活动应该在{@link
  android.app.Activity#onPause}和{@link android.app.Activity#onStop}方法中执行大部分清理工作。
  但是，如果您的活动包括在{@link android.app.Activity#onCreate onCreate()}
  中创建的后台线程或其他长时间运行的资源，如果没有正确关闭，可能会导致内存泄漏，因此应该在{@link
  android.app.Activity#onDestroy}中终止它们。</p>

<pre>
&#64;Override
public void onDestroy() {
    super.onDestroy();  // Always call the superclass
    
    // Stop method tracing that the activity started during onCreate()
    android.os.Debug.stopMethodTracing();
}
</pre>

<p class="note"><strong>注：</strong> 除了你在onCreate（）方法中调用了{@link android.app.Activity#finish()}
  以外，系统会在调用了{@link android.app.Activity#onPause}和{@link android.app.Activity#onStop}
  之后才调用{@link android.app.Activity#onDestroy}。在某些情况下，例如当您的活动只是用于决定如何启动其它活动，
  您可以在{@link android.app.Activity#onCreate onCreate()}中调用{@link android.app.Activity#finish()}
  来销毁它。在这种情况下，系统会立即调用{@link android.app.Activity#onDestroy}，
  不会去调用其他任何生命周期方法。</p>
