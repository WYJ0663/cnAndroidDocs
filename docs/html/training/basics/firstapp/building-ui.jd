page.title=构建简单的用户界面
parent.title=创建你的首个应用
parent.link=index.html

trainingnavtop=true
previous.title=运行你的应用
previous.link=running-app.html
next.title=启动另一个活动
next.link=starting-activity.html

@jd:body


<!-- This is the training bar -->
<div id="tb-wrapper"> 
<div id="tb"> 
 
<h2>该课程教你</h2>

<ol>
  <li><a href="#LinearLayout">创建线性布局</a></li>
  <li><a href="#TextInput">添加文本框</a></li>
  <li><a href="#Strings">添加字符串资源</a></li>
  <li><a href="#Button">添加按钮</a></li>
  <li><a href="#Weight">使输入框宽度充满整个屏幕</a></li>
</ol>


<h2>你也应该阅读</h2>
<ul>
  <li><a href="{@docRoot}guide/topics/ui/declaring-layout.html">布局</a></li>
</ul>

</div> 
</div> 


<p>Android的图形用户界面通过 {@link android.view.View} 和 {@link android.view.ViewGroup} 
  的层叠来构建。 {@link android.view.View} 对象是普通的 UI 小部件，例如<a
  href="{@docRoot}guide/topics/ui/controls/button.html">按钮</a>和<a
  href="{@docRoot}guide/topics/ui/controls/text.html">文本框</a>；{@link android.view.ViewGroup}
  对象是不可见的视图容器，定义如何布局其子视图，例如网格和纵向列表。</p>

<p>Android 提供了对应于 {@link android.view.View} 和 {@link android.view.ViewGroup} 子类的 XMl
  标签，你可以在 XML 通过 UI 元素的层叠来创建你的 UI。</p>


<div class="sidebox-wrapper">
<div class="sidebox">
  <h2>可选布局</h2>
  <p>使用 XML 定义 UI 布局而不是在运行时通过代码创建布局，有时候是有好处的；
    但对于为不同屏幕大小创建不同布局来说，他是特别重要的。例如，你可以创建两个版本的布局，
    并告诉系统一个用于“小”屏幕，另一个用于“大”屏幕。更多信息参见教程<a
    href="{@docRoot}training/basics/supporting-devices/index.html">支持不同设备</a>。</p>
</div>
</div>

<img src="{@docRoot}images/viewgroup.png" alt="" width="400" height="214" />
<p class="img-caption"><strong>图1 -</strong> 在布局中，{@link android.view.ViewGroup} 
  对象是如何形成分支并包含其它 {@link android.view.View} 对象的插图。</p>

<p>在这一次教程里，你将学到怎样用XML创建一个带有文本输入框和按钮的界面。 在接下来的课里，
  你将学会对按钮做出响应，当按钮被按下的时候文本框里的内容被发送到另外一个Activity。</p>


<h2 id="LinearLayout">创建线性布局</h2>

<p>从目录 <code>res/layout/</code> 里打开 <code>activity_main.xml</code> 文件。</p>

<p class="note"><strong>注意：</strong>在 Eclipse 中，当你打开布局文件的时候，首先看到的是
  ADT 布局编辑，这个编辑页是使用所见即所得的工具帮助你创建布局。 对于本课来说，你是直接在 XML
  里进行操作，因此点击屏幕下方的 <em>activity_main.xml</em> 标签进入 XML 编辑状态。</p>

<p>创建该项目时你选择的 BlankActivity 模版提供了以 {@link android.widget.RelativeLayout} 为根视图，
  并包含 {@link android.widget.TextView} 子视图的 <code>activity_main.xml</code> 文件。</p>

<p>首先，需要删除 {@link android.widget.TextView &lt;TextView>} 元素，把 {@link
  android.widget.RelativeLayout &lt;RelativeLayout>} 布局替换为 {@link
  android.widget.LinearLayout &lt;LinearLayout>} 布局。 然后添加 <a 
  href="{@docRoot}reference/android/widget/LinearLayout.html#attr_android:orientation">{@code
android:orientation}</a> 属性并设置为 “<code>horizontal</code>”。 结果应该是这样：</p>

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal" >
&lt;/LinearLayout>
</pre>

<p>{@link android.widget.LinearLayout} 布局是一个视图组（{@link android.view.ViewGroup}的子类），
用于水平放置或者垂直放置子视图的部件，由属性 <a
href="{@docRoot}reference/android/widget/LinearLayout.html#attr_android:orientation">{@code
android:orientation}</a> 来设定方向。{@link android.widget.LinearLayout }布局里的子元素按照 XML
里设定的顺序显示在屏幕上。</p> 

<p>另外的两个属性<a href="{@docRoot}reference/android/view/View.html#attr_android:layout_width">
{@code android:layout_width}</a> 和 <a
href="{@docRoot}reference/android/view/View.html#attr_android:layout_height">{@code
android:layout_height}</a>用来指定视图的大小，对所有视图来说都是必须的。</p>

<p>因为布局中 {@link android.widget.LinearLayout} 是跟视图，他应该充满整个屏幕区域，
这是通过设置他的高度和宽度为“<code>match_parent</code>”来实现的。 该值表明，
视图应该扩展其高度和宽度以<em>匹配</em>其父视图的高度和宽度。</p>

<p>关于布局属性的更多信息，参见<a href="{@docRoot}guide/topics/ui/declaring-layout.html">布局</a>
向导。</p>



<h2 id="TextInput">添加文本框</h2>

<p>在 {@link android.widget.LinearLayout &lt;LinearLayout>} 布局中，添加一个
{@link android.widget.EditText &lt;EditText>}元素就可以创建一个用户可编辑的文本框。</p>

EditText类属于View的一个用于展示可编辑的文本的子类。

和View的别的类一样，你需要设置XML里的某些属性来指定EditText的具体功能，下边是你应该在线性布局里指定的一些属性元素： 

<p>与其他{@link android.view.View 视图}对象一样，你需要设置 XML 里的某些属性来指定 {@link
android.widget.EditText} 的具体功能，下边是你应该 {@link android.widget.LinearLayout
&lt;LinearLayout>} 布局里指定的一些属性元素： </p>

<pre>
    &lt;EditText android:id="@+id/edit_message"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:hint="@string/edit_message" />
</pre>


<div class="sidebox-wrapper">
<div class="sidebox">
  <h3>关于资源对象</h3>
  <p>资源对象是简单的可以唯一识别命名整数，他与应用程序资源关联，比如位图、布局文件和字符串。</p>
  <p>每个资源在项目的 {@code gen/R.java} 文件中都定义了一个对应资源对象。 你可以通过使用 {@code R}
    类中的对象名来参照你的资源，比如当你需要为 <a
    href="{@docRoot}reference/android/widget/TextView.html#attr_android:hint">{@code android:hint}</a>
    属性指定一个字符串值的时候。你也可以创建任意的资源 ID，通过 <a
    href="{@docRoot}reference/android/view/View.html#attr_android:id">{@code android:id}</a>
    属性关联到视图，它允许你从其它代码中参照这个视图。</p>
  <p>SDK 工具在每次你编译应用时生成 {@code R.java}。 你不能手动更改该文件。</p>
  <p>更多内容请阅读开发向导<a href="{@docRoot}guide/topics/resources/providing-resources.html">
    提供资源</a>。</p>
</div>
</div>

<p>关于这些属性：</p>

<dl>
<dt><a href="{@docRoot}reference/android/view/View.html#attr_android:id">{@code android:id}</a></dt>
<dd>他为视图提供唯一标识，你可以在程序的代码里进行引用，你可以对这个类进行读和修改的操作
  （在下一课里会用到）。

<p>当你想从 XML 里使用资源类的时候必须使用“<code>&#64;</code>”符号。
  其后是资源类型(这里是 {@code id})、斜线、和资源名称 ({@code edit_message})。</p>


<p>资源类型前的加号 (<code>+</code>) 在你首次定义资源 ID 时使用。在你编译应用时，SDK 工具使用该
  ID 名称在项目的 {@code gen/R.java} 文件中创建新的资源 ID，使它参照到 {@link
  android.widget.EditText} 元素。 资源 ID 以这种方式生成一次，其它对该 ID 的参照就不需要加号了。
  加号只用于指定新的资源 ID 时，对于类似 字符串、布局这样的实际资源不需要他。
  关于资源对象的更多信息参见侧边栏。</p></dd>

<dt><a
href="{@docRoot}reference/android/view/View.html#attr_android:layout_width">{@code
android:layout_width}</a> 和 <a
href="{@docRoot}reference/android/view/View.html#attr_android:layout_height">{@code
android:layout_height}</a></dt>
<dd>对于宽和高不建议指定具体的大小，使用“<code>wrap_content</code>”指定之后，
  这个视图只是占据内容大小的空间。如果你使用了“<code>match_parent</code>”，这时
  {@link android.widget.EditText}将会布满整个屏幕，因为它将适应父布局 {@link
  android.widget.LinearLayout}的大小。更多信息，参见<a
  href="{@docRoot}guide/topics/ui/declaring-layout.html">布局</a>向导。</dd>

<dt><a
href="{@docRoot}reference/android/widget/TextView.html#attr_android:hint">{@code
android:hint}</a></dt>
<dd>这是文本框为空时默认显示的字符串。 参照另外文件中定义的字符串资源的“{@code
  "@string/edit_message"}”值用于代替使用硬编码的字符串值。 它指向具体的资源（不是单纯的标识符），
  因此不需要加号。 然而，因为你还没有定义该字符串资源，首先你会看到一个编译错误。
  在下一小节中通过定义该字符串会解决这个问题。

<p class="note"><strong>注意：</strong> 有与此字符串资源同名的元素 ID：{@code edit_message}。
  不过，对资源的参照根据资源的类型限定了范围（比如 {@code id} 或 {@code string}），
  因此使用相同的名称也不会引起冲突。</p>
</dd>
</dl>



<h2 id="Strings">添加字符串资源</h2>

<p>当你需要在用户界面中添加文本时，你应该总是使用资源来指定每个字符串。
  字符串资源允许你在一个位置管理所有的 UI 文本，这使寻找个更新文本更容易。 外部的字符串，
  也可以让您根据不同的语言，为每个字符串资源提供可供选择的定义来本地化你的应用程序。</p>

<p>默认情况下，你的 Andr​​oid 项目包括一个字符串资源文件，它在“<code>res/values/strings.xml</code>”。
  添加一个名为“<code>edit_message</code>”的新字符串，将其值设置为“Enter a message”。
  （你可以删除名为“hello_world”字符串）。</p>

<p>既然你在编辑该文件，顺便为即将添加的按钮“<code>button_send</code>”添加一个值为“Send”的字符串。
</p>

<p><code>strings.xml</code>的结果看起来像这样：</p>

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;resources>
    &lt;string name="app_name">My First App&lt;/string>
    &lt;string name="edit_message">Enter a message&lt;/string>
    &lt;string name="button_send">Send&lt;/string>
    &lt;string name="menu_settings">Settings&lt;/string>
    &lt;string name="title_activity_main">MainActivity&lt;/string>
&lt;/resources>
</pre>

<p>关于使用字符串资源为其它语言本地化你的应用的更多信息，参见教程“<a
href="{@docRoot}training/basics/supporting-devices/index.html">支持不同设备</a>”。</p>




<h2 id="Button">添加按钮</h2>

<p>现在，紧接着 {@link android.widget.EditText &lt;EditText>} 元素添加一个 {@link
  android.widget.Button &lt;Button>}到布局中：</p>

<pre>
    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/button_send" />
</pre>

<p>高度和宽度都设置为“<code>wrap_content</code>”，所以按钮会大到足以显示其文本内容。
  此按钮并不需要的<a href="{@docRoot}reference/android/view/View.html#attr_android:id">{@code
  android:id}</a>属性，因为活动的代码中不会用到它。</p>



<h2 id="Weight">使输入框宽度充满整个屏幕</h2>

<p>如图2所示，目前布局设计成使 {@link android.widget.EditText} 和 {@link android.widget.Button}
  两个小部件的大小适合其内容。</p>

<img src="{@docRoot}images/training/firstapp/edittext_wrap.png" />
<p class="img-caption"><strong>图2.</strong> {@link android.widget.EditText} 和 {@link
  android.widget.Button} 小部件宽度设置为“<code>wrap_content</code>”。</p>

<p>该设置对按钮来说，工作得很好，但并不适用于文本字段，因为用户可能输入更长的文字。 因此，
  使文本字段充满屏幕宽度的未使用区域会比较好。 在 {@link android.widget.LinearLayout} 布局中，
  你可以通过指定 <a href="{@docRoot}reference/android/widget/LinearLayout.LayoutParams.html#weight">
  {@code android:layout_weight}</a> 属性设置<em>权重</em>来实现。</p>

<p>权重值是一个数字，指定每个视图所要占用的剩余空间量，对于兄弟视图的相对占用量。这有点像调酒配方：
  “两份伏特加酒，一份咖啡利口酒”，即三分之二的饮料是伏特加酒。例如，如果你设置一个视图的权重是 2、
  另一个权重为1，总和是3。所以第一个视图填充剩余的空间的三分之二，第二个视图填充其余空间。
  如果添加了第三个视图，并设它的权重为1，那么现在第一个视图（权重2）得到1/2的剩余空间，
  剩下的两个各获得1/4。</p>

<p>所有视图的默认权重为 0，因此，如果只有一个视图的权重大于 0，
  则该视图填充为各视图分配必要空间后剩余的所有空间。因此，要使 {@link android.widget.EditText}
  元素填充布局的剩余空间，设它的权重为1，保持按钮没有权重。</p>

<pre>
    &lt;EditText
        android:layout_weight="1"
        ... />
</pre>

<p>为了提高布局效率，指定了权重时，你应该将 {@link android.widget.EditText} 的宽度设为零（0dp）。
  设置宽度为零会提高布局性能，是因为使用“<code>wrap_content</code>”作为宽度时，
  需要系统进行无意义的计算，因为权重值需要另外的宽度计算，来填充剩余空间。</p>
<pre>
    &lt;EditText
        android:layout_weight="1"
        android:layout_width="0dp"
        ... />
</pre>

<p>图3显示了将所有权重分配给 {@link android.widget.EditText} 元素的结果。</p>

<img src="{@docRoot}images/training/firstapp/edittext_gravity.png" />
<p class="img-caption"><strong>图 3.</strong> 给予 {@link android.widget.EditText} 小部件所有权重，
  填充了 {@link android.widget.LinearLayout} 布局的所有剩余空间。</p>

<p>现在，完整的布局文件应该如下：</p>

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal">
    &lt;EditText android:id="@+id/edit_message"
        android:layout_weight="1"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="@string/edit_message" />
    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/button_send" />
&lt;/LinearLayout>
</pre>

<p>此布局由创建项目时通过 SDK 工具生成的默认 {@link android.app.Activity} 类加载，
所以你现在可以运行应用来查看结果：</p>

<ul>
  <li>在Eclipse中，从工具栏中单击“Run”<img src="{@docRoot}images/tools/eclipse-run.png" 
                                 style="vertical-align:baseline;margin:0" />。</li>
  <li>或者从命令行，将目录切换到你的 Andr​​oid 项目的根目录下，然后执行：
<pre>
ant debug
adb install bin/MyFirstApp-debug.apk
</pre></li>
</ul>

<p>继续下一课，你可以学习如何响应按钮按下，读取文本字段的内容，启动另一个活动，等等。</p>
