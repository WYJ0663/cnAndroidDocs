page.title=增加最近查询的建议项
parent.title=检索
parent.link=index.html
@jd:body

<div id="qv-wrapper">
<div id="qv">
<h2>译者链接</h2>
<ol>
<li><a href="http://weibo.com/popapa">呆呆大虾</a></li>
</ol>

<h2>本文目录</h2>
<ol>
<li><a href="#TheBasics">简介</a></li>
<li><a href="#RecentQueryContentProvider">创建Content Provider </a></li>
<li><a href="#RecentQuerySearchableConfiguration">修改搜索配置文件 </a></li>
<li><a href="#SavingQueries">保存搜索请求</a></li>
<li><a href="#ClearingSuggestionData">清除建议项数据</a></li>
</ol>

<h2>关键类</h2>
<ol>
<li>{@link android.provider.SearchRecentSuggestions}</li>
<li>{@link android.content.SearchRecentSuggestionsProvider}</li>
</ol>

<h2>参阅</h2>
<ol>
<li><a href="searchable-config.html">搜索配置文件</a></li>
</ol>
</div>
</div>

<p>使用Android的搜索对话框或者搜索widget时，可能需要根据最近的搜索请求提供搜索建议项。
比如，假设用户以前搜索过“puppies”，那么一旦他开始键入同样的请求时，这就可以作为建议项显示出来。
图1展示了带有最近求建议的搜索对话框。</p>

<p>在开始前，需要为应用程序基本的搜索功能实现搜索对话框或搜索widget。如果没有，请参阅
<a href="search-dialog.html">创建搜索界面</a>。</p>

<h2 id="TheBasics">简介</h2>

<div class="figure" style="width:250px">
<img src="{@docRoot}images/search/search-suggest-recent-queries.png" alt="" height="417"  />
<p class="img-caption"><strong>图 1.</strong>带有最近请求建议的搜索对话框截屏</p>
</div>

<p>最近请求建议项只是简单地保存了搜索文本。当用户选中一个建议项时，搜索 activity 会收到一个
{@link android.content.Intent#ACTION_SEARCH} intent，其中附带了作为搜索请求的建议项，
该请求以前已经由搜索activity处理过的（如<a href="search-dialog.html">创建搜索界面</a>所述)。</p>

<p>要提供最近请求建议功能，需要：</p>

<ul>
  <li>实现一个搜索activity，如<a href="{@docRoot}guide/topics/search/search-dialog.html">
  创建搜索界面</a>中所述。</li>
  <li>创建一个继承自 {@link android.content.SearchRecentSuggestionsProvider} 的content provider，
  并在manifest中进行声明。</li>
  <li>修改搜索配置文件中有关提供搜索建议项的content provider配置。</li>
  <li>每次执行搜索后把请求保存到content provider中。</li>
</ul>

<p>Android系统显示搜索对话框时，也就会把搜索建议项显示在对话框或搜索widget下面。
所有需要做的事情就是提供数据源，系统能够从中获取建议项。</p>

<p>如果系统识别出activity是支持搜索功能并提供搜索建议的，则用户一旦开始键入搜索请求，就会触发以下动作：</p>

<ol>
  <li>系统读取搜索请求文本（输入多少读取多少）并在存放建议项的content provider中进行检索。</li>
  <li>content provider返回一个 {@link android.database.Cursor}，它指向匹配搜索文本的全部建议项。 </li>
  <li>系统显示该Cursor提供的建议项列表。</li>
</ol>

<p>一旦最近请求建议项显示完毕，将发生以下事情：</p>

<ul>
  <li>如果用户键入其它字符，或者以其它任何方式修改了请求文本，则上述步骤会重复执行，建议项列表将同步更新。</li>
  <li>如果用户执行了搜索，建议项将被忽略，搜索文本将用正常的{@link android.content.Intent#ACTION_SEARCH}
   intent发送给搜索activity。</li>
  <li>•	如果用户选中了某个建议项，{@link android.content.Intent#ACTION_SEARCH} intent
  将把建议项文本作为请求发送给搜索activity。</li>
</ul>

<p>作为content provider使用的{@link android.content.SearchRecentSuggestionsProvider}
类会自动处理上述工作的，因此实际上只需要编写很少量的代码即可。</p>

<h2 id="RecentQueryContentProvider">创建Content Provider</h2>

<p>最近请求建议项需要用到的content provider必须是 {@link android.content.SearchRecentSuggestionsProvider}
的实现。该类几乎处理了所有的事情，必需实现的只是编写一个包含一行代码的类构造方法。</p>

<p>以下是一个最近请求建议项所需的content provider完整的实现示例：</p>

<pre>
public class MySuggestionProvider extends SearchRecentSuggestionsProvider {
    public final static String AUTHORITY = "com.example.MySuggestionProvider";
    public final static int MODE = DATABASE_MODE_QUERIES;

    public MySuggestionProvider() {
        setupSuggestions(AUTHORITY, MODE);
    }
}
</pre>

<p>{@link android.content.SearchRecentSuggestionsProvider#setupSuggestions(String,int)
setupSuggestions()} 调用参数为搜索authority和数据库模式。搜索authority可以是任何唯一的字符串，
但最好是用content provider的完全限定名称（包名加provider类名；比如“com.example.MySuggestionProvider”）。
数据库模式必须包括 {@link android.content.SearchRecentSuggestionsProvider#DATABASE_MODE_QUERIES}，
可选项 {@link android.content.SearchRecentSuggestionsProvider#DATABASE_MODE_2LINES}
会在建议项列表中添加一列，使得每个建议项能提供两条文本。例如，要为每个建议项提供两行文本：</p>

<pre>
public final static int MODE = DATABASE_MODE_QUERIES | DATABASE_MODE_2LINES;
</pre>

<p>下面在manifest文件中声明content provider，authority串是与{@link 
android.content.SearchRecentSuggestionsProvider}类中（及搜索配置文件中）的相同。例如：</p>

<pre>
&lt;application>
    &lt;provider android:name=".MySuggestionProvider"
              android:authorities="com.example.MySuggestionProvider" />
    ...
&lt;/application>
</pre>

<h2 id="RecentQuerySearchableConfiguration">修改搜索配置文件</h2>

<p>为了能够使用建议项provider，需要对系统进行配置，在搜索配置文件的{@code &lt;searchable&gt;}
元素中添加 {@code android:searchSuggestAuthority} 和 {@code android:searchSuggestSelection}
属性。例如：</p>

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;searchable xmlns:android="http://schemas.android.com/apk/res/android"
    android:label="@string/app_label"
    android:hint="@string/search_hint"
    <b>android:searchSuggestAuthority="com.example.MySuggestionProvider"
    android:searchSuggestSelection=" ?"</b> >
&lt;/searchable>
</pre>

<p>{@code android:searchSuggestAuthority} 的值必须是content provider的完全限定名称，
它必须与content provider使用的authority完全一致（上例中是{@code AUTHORITY} 字符串）。</p>

<p>{@code android:searchSuggestSelection} 的值必须是空格加问号（{@code " ?"}），
这只是一个SQLite查询参数的占位符（将自动替换为用户录入的搜索请求文本）。</p>

<h2 id="SavingQueries">保存搜索请求</h2>

<p>为了构建最近搜索请求的集合，需把搜索activity收到的所有请求都添加到 {@link
android.content.SearchRecentSuggestionsProvider} 中去。要实现这一目标，请创建一个
{@link android.provider.SearchRecentSuggestions} 的实例，每当搜索activity
接受到请求时都调用一次 {@link android.provider.SearchRecentSuggestions#saveRecentQuery(String,String)
saveRecentQuery()}方法。下面是如何在activity的 {@link android.app.Activity#onCreate(Bundle)
onCreate()}方法中保存搜索请求的示例：</p>

<pre>
&#64;Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    Intent intent  = getIntent();

    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
        String query = intent.getStringExtra(SearchManager.QUERY);
        SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,
                MySuggestionProvider.AUTHORITY, MySuggestionProvider.MODE);
        suggestions.saveRecentQuery(query, null);
    }
}
</pre>

<p>{@link android.content.SearchRecentSuggestionsProvider} 构造方法需要用到与
content provider定义相同的authority 和数据库模式。</p>

<p>{@link android.provider.SearchRecentSuggestions#saveRecentQuery(String,String)
saveRecentQuery()} 方法的第一个参数是搜索关键字，第二个参数包含建议项的第二行文本（或为空）。
第二个参数只有用{@link
android.content.SearchRecentSuggestionsProvider#DATABASE_MODE_2LINES}启用两行模式
（two-line mode）时才会用到。如果启用了两行模式（two-line mode），系统在检索建议项时，
会同时把请求文本与第二行文本进行匹配。</p>

<h2 id="ClearingSuggestionData">清除建议项数据</h2>

<p>为了保护用户隐私，应该确保向用户提供清除最近搜索建议项的功能。要清除搜索历史记录，调用 {@link
android.provider.SearchRecentSuggestions#clearHistory()} 即可。例如：</p>

<pre>
SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,
        HelloSuggestionProvider.AUTHORITY, HelloSuggestionProvider.MODE);
suggestions.clearHistory();
</pre>

<p>可以选择在“清除搜索历史”菜单项、个人设置项或按钮中执行此操作。
还应该提供确认对话框来验证用户真的是需要删除搜索历史记录。</p>

